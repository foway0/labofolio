openapi: "3.0.0"
info:
  version: 1.0.0
  title: WEB API
  license:
    name: MIT
servers:
  - url: http://localhost:3000
paths:
  /ping:
    get:
      description: |
        ping then pong
      operationId: pingpong
      responses:
        '200':
          description: OK
        default:
          description: unexpected error
          content:
            text/plain:
              schema:
                type: string
                example: pong

  ######################
  # sample
  ######################
  /sample:
    get:
      description: |
        findAll sample
      operationId: listSample
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SampleCollection'
  /sample/{id}:
    get:
      description: |
        findOne sample
        Numeric ID
      operationId: findSample
      parameters:
        - in: path
          description: Numeric ID of the sample to get
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sample'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ######################
  # login google
  ######################
  /auth/google:
    get:
      description: |
        google oauth
      operationId: authGoogle
      responses:
        '302':
          description: Moved Permanently
  /auth/google/callback:
    get:
      description: |
        google oauth
      operationId: authGoogle
      responses:
        '200':
          description: login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oauth'

  ######################
  # blog
  ######################
  /blogs:
    post:
      description: |
        blog post
      operationId: blogPost
      parameters:
        - $ref: '#/components/parameters/authorization'
      responses:
        '204':
          description: No Content
    get:
      description: |
        blog list
      operationId: blogList
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: No Content
components:
  parameters:
    limit:
      in: query
      description: pagination limit
      name: limit
      schema:
        type: integer
      required: false
    offset:
      in: query
      description: pagination offset
      name: offset
      schema:
        type: integer
      required: false
    authorization:
      in: header
      description: jwt tokens
      name: Authorization
      schema:
        type: string
      required: true



  schemas:
    Sample:
      properties:
        id:
          type: integer
          format: int64
        status:
          type: string
        text:
          type: string
        created:
          type: string
        modified:
          type: string
      type: object

    SampleCollection:
      items:
        $ref: '#/components/schemas/Sample'
      type: array

    oauth:
      properties:
        accesstoken:
          type: string

    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string