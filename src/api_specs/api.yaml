openapi: "3.0.0"
info:
  version: 1.0.0
  title: API
  license:
    name: MIT
servers:
  - url: https://localhost:3000
paths:
  /ping:
    get:
      description: |
        ping then pong
      operationId: ping
      x-eov-operation-handler: routes/ping
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: pong
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  ######################
  # users
  ######################
  /users:
    post:
      description: |
        users post
      x-eov-operation-id: create
      x-eov-operation-handler: routes/users
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{strategy_id}:
    get:
      description: |
        users post
      x-eov-operation-id: one
      x-eov-operation-handler: routes/users
      parameters:
        - name: strategy_id
          in: path
          description: ID of pet to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ######################
  # blog
  ######################
  /blogs:
    post:
      description: |
        blog post
      x-eov-operation-id: create
      x-eov-operation-handler: routes/blogs
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '204':
          description: No Content
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      description: |
        blog list
      operationId: list
      x-eov-operation-handler: routes/blogs
      parameters:
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blogs'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      required:
        - id
        - strategy_id
        - status
        - role_id
        - nickname
      properties:
        id:
          type: number
          readOnly: true
        strategy_id:
          type: string
        status:
          type: string
          enum:
            - invalid
            - valid
        role_id:
          type: string
          enum:
            - viewer
            - admin
        nickname:
          type: string
    Blog:
      required:
        - id
        - status
        - subject
        - content_text
        - content_md
        - content_html
      properties:
        id:
          type: number
          readOnly: true
        status:
          type: string
          enum:
            - invalid
            - valid
        subject:
          type: string
        content_text:
          type: string
        conten_md:
          type: string
        content_html:
          type: string
    Blogs:
      required:
        - count
        - rows
      properties:
        count:
          type: integer
          format: int32
          minimum: 0
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Blog'
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

  parameters:
    limit:
      in: query
      description: pagination limit
      name: limit
      schema:
        type: integer
      required: true
    offset:
      in: query
      description: pagination offset
      name: offset
      schema:
        type: integer
      required: true